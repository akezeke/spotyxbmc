Index: project/VS2008Express/XBMC.vcproj
===================================================================
--- project/VS2008Express/XBMC.vcproj	(revision 30221)
+++ project/VS2008Express/XBMC.vcproj	(working copy)
@@ -1,7 +1,7 @@
 <?xml version="1.0" encoding="Windows-1252"?>
 <VisualStudioProject
 	ProjectType="Visual C++"
-	Version="9.00"
+	Version="9,00"
 	Name="XBMC"
 	ProjectGUID="{3A68081D-E8F9-4523-9436-530DE9E5530A}"
 	RootNamespace="XBMC_PC"
@@ -269,10 +269,10 @@
 				Name="VCLinkerTool"
 				IgnoreImportLibrary="false"
 				AdditionalOptions="/MACHINE:I386 /IGNORE:4089 /ignore:4254"
-				AdditionalDependencies="SDL.lib D3D9.lib D3dx9.lib DInput8.lib DSound.lib winmm.lib ws2_32.lib Mpr.lib Iphlpapi.lib PowrProf.lib setupapi.lib dwmapi.lib"
+				AdditionalDependencies="libopenspotify.lib SDL.lib D3D9.lib D3dx9.lib DInput8.lib DSound.lib winmm.lib ws2_32.lib Mpr.lib Iphlpapi.lib PowrProf.lib setupapi.lib dwmapi.lib"
 				OutputFile="$(OutDir)\XBMC.exe"
 				LinkIncremental="1"
-				AdditionalLibraryDirectories="..\..\lib\libSDL-WIN32\lib"
+				AdditionalLibraryDirectories="&quot;..\..\lib\libSDL-WIN32\lib&quot;;&quot;..\..\..\libspotify\lib&quot;"
 				IgnoreDefaultLibraryNames="libc;msvcrt;libci"
 				DelayLoadDLLs="dwmapi.dll;libmicrohttpd-5.dll;libssh.dll"
 				GenerateDebugInformation="true"
@@ -2273,6 +2273,22 @@
 				>
 			</File>
 			<File
+				RelativePath="..\..\xbmc\cores\paplayer\spotifyCodec.cpp"
+				>
+			</File>
+			<File
+				RelativePath="..\..\xbmc\cores\paplayer\spotifyCodec.h"
+				>
+			</File>
+			<File
+				RelativePath="..\..\xbmc\spotinterface.cpp"
+				>
+			</File>
+			<File
+				RelativePath="..\..\xbmc\spotinterface.h"
+				>
+			</File>
+			<File
 				RelativePath="..\..\xbmc\SystemGlobals.h"
 				>
 			</File>
@@ -5516,6 +5532,14 @@
 					>
 				</File>
 				<File
+					RelativePath="..\..\xbmc\addons\PluginSource.cpp"
+					>
+				</File>
+				<File
+					RelativePath="..\..\xbmc\addons\PluginSource.h"
+					>
+				</File>
+				<File
 					RelativePath="..\..\xbmc\addons\Repository.cpp"
 					>
 				</File>
Index: xbmc/AdvancedSettings.cpp
===================================================================
--- xbmc/AdvancedSettings.cpp	(revision 30637)
+++ xbmc/AdvancedSettings.cpp	(working copy)
@@ -60,6 +60,16 @@
   m_karaokeAlwaysEmptyOnCdgs = 1;
   m_karaokeUseSongSpecificBackground = 0;
 
+  //spotify
+  m_spotifyEnable = true;
+  m_spotifyUseHighBitrate = true;
+  m_spotifyUsername = "";
+  m_spotifyPassword = "";
+  m_spotifyCacheFolder = "/tmp/spotify/";
+  m_spotifyMaxSearchArtists = 50;
+  m_spotifyMaxSearchAlbums = 50;
+  m_spotifyMaxSearchTracks = 100;
+
   m_audioDefaultPlayer = "paplayer";
   m_audioPlayCountMinimumPercent = 90.0f;
   m_audioHost = "default";
@@ -553,6 +563,20 @@
     XMLUtils::GetInt(pElement, "movielength", m_iMythMovieLength);
   }
 
+  //spotify
+  pElement = pRootElement->FirstChildElement("spotify");
+  if (pElement)
+  {
+    XMLUtils::GetBoolean(pElement, "enable", m_spotifyEnable);
+    XMLUtils::GetBoolean(pElement, "highbitrate", m_spotifyUseHighBitrate);
+    XMLUtils::GetString(pElement, "username", m_spotifyUsername);
+    XMLUtils::GetString(pElement, "password", m_spotifyPassword);
+    XMLUtils::GetString(pElement, "cachefolder", m_spotifyCacheFolder);
+    XMLUtils::GetInt(pElement, "maxsearchartists", m_spotifyMaxSearchArtists, 0, 500);
+    XMLUtils::GetInt(pElement, "maxsearchalbums", m_spotifyMaxSearchAlbums,0,500);
+    XMLUtils::GetInt(pElement, "maxsearchtracks", m_spotifyMaxSearchTracks,0,1000);
+  }
+
   // EDL commercial break handling
   pElement = pRootElement->FirstChildElement("edl");
   if (pElement)
Index: xbmc/AdvancedSettings.h
===================================================================
--- xbmc/AdvancedSettings.h	(revision 30637)
+++ xbmc/AdvancedSettings.h	(working copy)
@@ -71,6 +71,16 @@
     CStdString m_audioDefaultPlayer;
     float m_audioPlayCountMinimumPercent;
 
+    //Spotify
+    bool m_spotifyEnable;
+    bool m_spotifyUseHighBitrate;
+    CStdString m_spotifyUsername;
+    CStdString m_spotifyPassword;
+    CStdString m_spotifyCacheFolder;
+    int m_spotifyMaxSearchArtists;
+    int m_spotifyMaxSearchAlbums;
+    int m_spotifyMaxSearchTracks;
+
     float m_videoSubsDelayRange;
     float m_videoAudioDelayRange;
     int m_videoSmallStepBackSeconds;
Index: xbmc/Application.cpp
===================================================================
--- xbmc/Application.cpp	(revision 30637)
+++ xbmc/Application.cpp	(working copy)
@@ -22,6 +22,10 @@
 #if (defined HAVE_CONFIG_H) && (!defined WIN32)
   #include "config.h"
 #endif
+
+//spotify
+#include "spotinterface.h"
+
 #include "Application.h"
 #include "utils/Builtins.h"
 #include "SystemGlobals.h"
@@ -1144,6 +1148,13 @@
     g_windowManager.ActivateWindow(g_SkinInfo->GetFirstWindow());
   }
 
+  //spotify
+  if (g_advancedSettings.m_spotifyEnable)
+  {
+    g_spotifyInterface = new SpotifyInterface;
+    g_spotifyInterface->connect(false);
+  }
+
 #ifdef HAS_PYTHON
   g_pythonParser.m_bStartup = true;
 #endif
@@ -3341,6 +3352,12 @@
       g_lcd=NULL;
     }
 #endif
+    //spotify
+    if (g_advancedSettings.m_spotifyEnable)
+    {
+      delete g_spotifyInterface;
+    }
+    g_spotifyInterface = 0;
 
     CLog::Log(LOGNOTICE, "stopped");
   }
Index: xbmc/cores/paplayer/CodecFactory.cpp
===================================================================
--- xbmc/cores/paplayer/CodecFactory.cpp	(revision 30637)
+++ xbmc/cores/paplayer/CodecFactory.cpp	(working copy)
@@ -19,6 +19,10 @@
  *
  */
 
+//spotify
+#include "spotifyCodec.h"
+#include "../utils/log.h"
+
 #include "system.h"
 #include "CodecFactory.h"
 #include "MP3codec.h"
@@ -53,7 +57,12 @@
 
 ICodec* CodecFactory::CreateCodec(const CStdString& strFileType)
 {
-  if (strFileType.Equals("mp3") || strFileType.Equals("mp2"))
+  CLog::Log(LOGERROR, "Spotifylog: createcodec: %s", strFileType.c_str());
+  //spotify
+  if (strFileType.Equals("spotify"))
+    return new SpotifyCodec();
+
+  else if (strFileType.Equals("mp3") || strFileType.Equals("mp2"))
     return new MP3Codec();
   else if (strFileType.Equals("ape") || strFileType.Equals("mac"))
     return new DVDPlayerCodec();
@@ -130,7 +139,12 @@
 ICodec* CodecFactory::CreateCodecDemux(const CStdString& strFile, const CStdString& strContent, unsigned int filecache)
 {
   CURL urlFile(strFile);
-  if( strContent.Equals("audio/mpeg") )
+
+  //spotify
+  if ( strFile.Right(7).Equals("spotify") )
+    return new SpotifyCodec();
+
+  else if( strContent.Equals("audio/mpeg") )
     return new MP3Codec();
   else if( strContent.Equals("audio/aac")
     || strContent.Equals("audio/aacp") )
Index: xbmc/cores/paplayer/Makefile.in
===================================================================
--- xbmc/cores/paplayer/Makefile.in	(revision 30637)
+++ xbmc/cores/paplayer/Makefile.in	(working copy)
@@ -9,7 +9,7 @@
 
 CFLAGS+=-DHAS_ALSA
 
-SRCS=AC3CDDACodec.cpp AC3Codec.cpp ADPCMCodec.cpp AIFFcodec.cpp AudioDecoder.cpp CDDAcodec.cpp CodecFactory.cpp VGMCodec.cpp FLACcodec.cpp GYMCodec.cpp MP3codec.cpp NSFCodec.cpp OGGcodec.cpp ReplayGain.cpp SIDCodec.cpp TimidityCodec.cpp WAVcodec.cpp WAVPackcodec.cpp YMCodec.cpp DVDPlayerCodec.cpp DTSCodec.cpp DTSCDDACodec.cpp PAPlayer.cpp OggCallback.cpp ModplugCodec.cpp
+SRCS=spotifyCodec.cpp AC3CDDACodec.cpp AC3Codec.cpp ADPCMCodec.cpp AIFFcodec.cpp AudioDecoder.cpp CDDAcodec.cpp CodecFactory.cpp VGMCodec.cpp FLACcodec.cpp GYMCodec.cpp MP3codec.cpp NSFCodec.cpp OGGcodec.cpp ReplayGain.cpp SIDCodec.cpp TimidityCodec.cpp WAVcodec.cpp WAVPackcodec.cpp YMCodec.cpp DVDPlayerCodec.cpp DTSCodec.cpp DTSCDDACodec.cpp PAPlayer.cpp OggCallback.cpp ModplugCodec.cpp
 
 ifeq (@USE_ASAP_CODEC@,1)
   SRCS+=ASAPCodec.cpp
Index: xbmc/cores/paplayer/PAPlayer.cpp
===================================================================
--- xbmc/cores/paplayer/PAPlayer.cpp	(revision 30637)
+++ xbmc/cores/paplayer/PAPlayer.cpp	(working copy)
@@ -33,6 +33,8 @@
 #include "../AudioRenderers/AudioRendererFactory.h"
 #include "../../utils/TimeUtils.h"
 #include "utils/log.h"
+//spotify
+#include "spotifyCodec.h"
 
 #ifdef _LINUX
 #define XBMC_SAMPLE_RATE 44100
@@ -544,9 +546,15 @@
       return false;
 
     UpdateCacheLevel();
-
+    
     // check whether we should queue the next file up
-    if ((GetTotalTime64() > 0) && GetTotalTime64() - GetTime() < TIME_TO_CACHE_NEXT_FILE + m_crossFading * 1000L && !m_cachingNextFile)
+    //spotify, we can only get the new file if the old one is done reading
+    bool isSpotifyFree = true;
+    if (m_decoder[m_currentDecoder].GetCodec()->m_CodecName == "spotify")
+    {
+       isSpotifyFree = SpotifyCodec::spotifyPlayerIsFree();
+    }
+    if (isSpotifyFree && (GetTotalTime64() > 0) && GetTotalTime64() - GetTime() < TIME_TO_CACHE_NEXT_FILE + m_crossFading * 1000L && !m_cachingNextFile)
     { // request the next file from our application
       m_callback.OnQueueNextItem();
       m_cachingNextFile = true;
Index: xbmc/FileSystem/Directory.cpp
===================================================================
--- xbmc/FileSystem/Directory.cpp	(revision 30637)
+++ xbmc/FileSystem/Directory.cpp	(working copy)
@@ -151,7 +151,7 @@
       pDirectory->SetExtFileInfo(extFileInfo);
 
       bool result;
-      if (g_application.IsCurrentThread() && allowThreads && !CUtil::IsSpecial(strPath))
+      if (g_application.IsCurrentThread() && allowThreads && !CUtil::IsSpecial(strPath) && strPath.Left(18) != "musicdb://spotify/")
       {
         CSingleExit ex(g_graphicsContext);
 
Index: xbmc/FileSystem/MusicDatabaseDirectory.cpp
===================================================================
--- xbmc/FileSystem/MusicDatabaseDirectory.cpp	(revision 30637)
+++ xbmc/FileSystem/MusicDatabaseDirectory.cpp	(working copy)
@@ -29,6 +29,8 @@
 #include "TextureManager.h"
 #include "LocalizeStrings.h"
 #include "utils/log.h"
+//spotify
+#include "spotinterface.h"
 
 using namespace std;
 using namespace XFILE;
@@ -44,6 +46,12 @@
 
 bool CMusicDatabaseDirectory::GetDirectory(const CStdString& strPath, CFileItemList &items)
 {
+  //spotify 
+  if (strPath.Left(18) == "musicdb://spotify/")
+  {
+    return g_spotifyInterface->getDirectory(strPath, items);
+  }
+
   auto_ptr<CDirectoryNode> pNode(CDirectoryNode::ParseURL(strPath));
 
   if (!pNode.get())
@@ -66,6 +74,11 @@
 
 NODE_TYPE CMusicDatabaseDirectory::GetDirectoryChildType(const CStdString& strPath)
 {
+  //spotify
+  if (strPath.Left(18) == "musicdb://spotify/")
+  {
+    return g_spotifyInterface->getChildType(strPath);
+  }
   auto_ptr<CDirectoryNode> pNode(CDirectoryNode::ParseURL(strPath));
 
   if (!pNode.get())
Index: xbmc/GUIDialogContextMenu.h
===================================================================
--- xbmc/GUIDialogContextMenu.h	(revision 30637)
+++ xbmc/GUIDialogContextMenu.h	(working copy)
@@ -110,7 +110,9 @@
                       CONTEXT_BUTTON_USER7,
                       CONTEXT_BUTTON_USER8,
                       CONTEXT_BUTTON_USER9,
-                      CONTEXT_BUTTON_USER10
+                      CONTEXT_BUTTON_USER10,
+                      //spotify add a button for removing albums from lib
+                      CONTEXT_BUTTON_SPOTIFY_REMOVE_ALBUM
                     };
 
 class CContextButtons : public std::vector< std::pair<CONTEXT_BUTTON, CStdString> >
Index: xbmc/GUIMediaWindow.cpp
===================================================================
--- xbmc/GUIMediaWindow.cpp	(revision 30637)
+++ xbmc/GUIMediaWindow.cpp	(working copy)
@@ -56,6 +56,8 @@
 #include "utils/FileUtils.h"
 #include "GUIEditControl.h"
 #include "GUIDialogKeyboard.h"
+//spotify
+#include "spotinterface.h"
 
 #define CONTROL_BTNVIEWASICONS     2
 #define CONTROL_BTNSORTBY          3
@@ -839,8 +841,9 @@
     if (!items.AlwaysCache())
       items.RemoveDiscCache(GetID());
 
+    //spotify, why? well not a very good way but it works, now we can perform operations without changing directory
     CFileItem directory(*pItem);
-    if (!Update(directory.m_strPath))
+    if (!Update(directory.m_strPath) && directory.m_strPath.Left(26) !="musicdb://spotify/command/")
       ShowShareErrorMessage(&directory);
 
     return true;
Index: xbmc/GUIViewStateMusic.cpp
===================================================================
--- xbmc/GUIViewStateMusic.cpp	(revision 30637)
+++ xbmc/GUIViewStateMusic.cpp	(working copy)
@@ -23,6 +23,8 @@
 #include "PlayListPlayer.h"
 #include "GUIBaseContainer.h" // for VIEW_TYPE_*
 #include "VideoDatabase.h"
+//spotify
+#include "MusicDatabase.h"
 #include "GUISettings.h"
 #include "AdvancedSettings.h"
 #include "Settings.h"
@@ -509,6 +511,18 @@
 
 void CGUIViewStateWindowMusicNav::AddOnlineShares()
 {
+  //spotify, only if we do use spotify
+  CLog::Log(LOGDEBUG,"Adding spotify share");
+  if (g_advancedSettings.m_spotifyEnable)
+  {
+    CMediaSource share;
+    share.strName="Spotify"; // main menu
+    share.strPath = "musicdb://spotify/menu/main/";
+    //share.m_strThumbnailImage = CUtil::GetDefaultFolderThumb("special://xbmc/media/spotify_core_logo.png");
+    share.m_iDriveType = CMediaSource::SOURCE_TYPE_LOCAL;
+    m_sources.push_back(share);
+  }
+
   if (!g_advancedSettings.m_bVirtualShares) return;
   for (int i = 0; i < (int)g_settings.m_musicSources.size(); ++i)
   {
Index: xbmc/GUIWindowMusicNav.cpp
===================================================================
--- xbmc/GUIWindowMusicNav.cpp	(revision 30637)
+++ xbmc/GUIWindowMusicNav.cpp	(working copy)
@@ -172,6 +172,10 @@
         m_startDirectory = returning ? destPath : "";
       }
 
+      //spotify  we still want a library view if we have spotify enabled
+      if (g_advancedSettings.m_spotifyEnable)
+        return true;
+
       //  base class has opened the database, do our check
       DisplayEmptyDatabaseMessage(m_musicdatabase.GetSongsCount() <= 0);
 
@@ -553,6 +557,10 @@
       if (strcmp(g_settings.m_defaultMusicLibSource, ""))
         buttons.Add(CONTEXT_BUTTON_CLEAR_DEFAULT, 13403); // clear default
     }
+
+    //spotify add the remove album button
+    buttons.Add(CONTEXT_BUTTON_SPOTIFY_REMOVE_ALBUM,"Remove album");
+
     NODE_TYPE childtype = dir.GetDirectoryChildType(item->m_strPath);
     if (childtype == NODE_TYPE_ALBUM               ||
         childtype == NODE_TYPE_ARTIST              ||
@@ -616,8 +624,22 @@
   if (itemNumber >= 0 && itemNumber < m_vecItems->Size())
     item = m_vecItems->Get(itemNumber);
 
+  //spotify
+  CSongMap songMap;
+  CMusicDatabase db;
+
   switch (button)
   {
+  //spotify remove the album
+  case CONTEXT_BUTTON_SPOTIFY_REMOVE_ALBUM:
+    db.Open();
+    db.BeginTransaction();
+    db.RemoveAlbum(item->m_strPath);
+    db.CommitTransaction();
+    db.Close();
+    Update(m_history.GetParentPath());
+    return true;
+
   case CONTEXT_BUTTON_INFO:
     {
       if (!item->IsVideoDb())
Index: xbmc/Makefile.in
===================================================================
--- xbmc/Makefile.in	(revision 30637)
+++ xbmc/Makefile.in	(working copy)
@@ -17,8 +17,8 @@
 INCLUDES+=-I../lib/jsoncpp/jsoncpp/include
 
 INCLUDES+=-Ilib/cpluff/libcpluff
-
-SRCS=Application.cpp \
+SRCS=spotinterface.cpp \
+     Application.cpp \
      CueDocument.cpp \
      GUISettings.cpp \
      GUIWindowAddonBrowser.cpp \
Index: xbmc/MusicDatabase.cpp
===================================================================
--- xbmc/MusicDatabase.cpp	(revision 30637)
+++ xbmc/MusicDatabase.cpp	(working copy)
@@ -1587,6 +1587,33 @@
   m_thumbCache.erase(m_thumbCache.begin(), m_thumbCache.end());
 }
 
+//spotify
+bool CMusicDatabase::RemoveAlbum(CStdString albumPath)
+{
+  albumPath.Delete(0,12);
+  CUtil::RemoveSlashAtEnd(albumPath);
+  try
+  {
+    if (NULL == m_pDB.get()) return false;
+    if (NULL == m_pDS.get()) return false;
+
+    CStdString strSQL;
+    strSQL=FormatSQL("delete from song where idAlbum=%s", albumPath.c_str());
+    m_pDS->exec(strSQL.c_str());
+    strSQL=FormatSQL("delete from album where idAlbum=%s", albumPath.c_str());
+    m_pDS->exec(strSQL.c_str());
+    this->CleanupSongs();
+    this->CleanupAlbums();
+    return true;
+  }
+  catch (...)
+  {
+    CLog::Log(LOGERROR, "%s failed", __FUNCTION__);
+  }
+
+  return false;
+}
+
 bool CMusicDatabase::Search(const CStdString& search, CFileItemList &items)
 {
   unsigned int time = CTimeUtils::GetTimeMS();
@@ -1854,7 +1881,8 @@
         CUtil::RemoveSlashAtEnd(strFileName);
       }
 
-      if (!CFile::Exists(strFileName))
+      //spotify, dont delete it if its a spotify song
+      if (CUtil::GetExtension(strFileName) !=".spotify" && !CFile::Exists(strFileName))
       { // file no longer exists, so add to deletion list
         strSongsToDelete += m_pDS->fv("song.idSong").get_asString() + ",";
       }
Index: xbmc/MusicDatabase.h
===================================================================
--- xbmc/MusicDatabase.h	(revision 30637)
+++ xbmc/MusicDatabase.h	(working copy)
@@ -116,6 +116,10 @@
   void EmptyCache();
   void Clean();
   int  Cleanup(CGUIDialogProgress *pDlgProgress);
+
+  //spotify, we need a new function to remove albums from the database
+  bool RemoveAlbum(CStdString albumPath);
+
   void DeleteAlbumInfo();
   bool LookupCDDBInfo(bool bRequery=false);
   void DeleteCDDBInfo();
Index: xbmc/Settings.cpp
===================================================================
--- xbmc/Settings.cpp	(revision 30637)
+++ xbmc/Settings.cpp	(working copy)
@@ -107,7 +107,7 @@
   m_bNonLinStretch = false;
 
   m_pictureExtensions = ".png|.jpg|.jpeg|.bmp|.gif|.ico|.tif|.tiff|.tga|.pcx|.cbz|.zip|.cbr|.rar|.m3u|.dng|.nef|.cr2|.crw|.orf|.arw|.erf|.3fr|.dcr|.x3f|.mef|.raf|.mrw|.pef|.sr2|.rss";
-  m_musicExtensions = ".nsv|.m4a|.flac|.aac|.strm|.pls|.rm|.rma|.mpa|.wav|.wma|.ogg|.mp3|.mp2|.m3u|.mod|.amf|.669|.dmf|.dsm|.far|.gdm|.imf|.it|.m15|.med|.okt|.s3m|.stm|.sfx|.ult|.uni|.xm|.sid|.ac3|.dts|.cue|.aif|.aiff|.wpl|.ape|.mac|.mpc|.mp+|.mpp|.shn|.zip|.rar|.wv|.nsf|.spc|.gym.adx|.dsp|.adp|.ymf|.ast|.afc|.hps|.xsp|.xwav|.waa|.wvs|.wam|.gcm|.idsp|.mpdsp|.mss|.spt|.rsd|.mid|.kar|.sap|.cmc|.cmr|.dmc|.mpt|.mpd|.rmt|.tmc|.tm8|.tm2|.oga|.url|.pxml|.tta|.rss|.cm3|.cms|.dlt|.brstm";
+  m_musicExtensions = ".nsv|.m4a|.flac|.aac|.strm|.pls|.rm|.rma|.mpa|.wav|.wma|.ogg|.mp3|.mp2|.m3u|.mod|.amf|.669|.dmf|.dsm|.far|.gdm|.imf|.it|.m15|.med|.okt|.s3m|.stm|.sfx|.ult|.uni|.xm|.sid|.ac3|.dts|.cue|.aif|.aiff|.wpl|.ape|.mac|.mpc|.mp+|.mpp|.shn|.zip|.rar|.wv|.nsf|.spc|.gym.adx|.dsp|.adp|.ymf|.ast|.afc|.hps|.xsp|.xwav|.waa|.wvs|.wam|.gcm|.idsp|.mpdsp|.mss|.spt|.rsd|.mid|.kar|.sap|.cmc|.cmr|.dmc|.mpt|.mpd|.rmt|.tmc|.tm8|.tm2|.oga|.url|.pxml|.tta|.rss|.cm3|.cms|.dlt|.brstm|.spotify";
   m_videoExtensions = ".m4v|.3g2|.3gp|.nsv|.tp|.ts|.ty|.strm|.pls|.rm|.rmvb|.m3u|.ifo|.mov|.qt|.divx|.xvid|.bivx|.vob|.nrg|.img|.iso|.pva|.wmv|.asf|.asx|.ogm|.m2v|.avi|.bin|.dat|.mpg|.mpeg|.mp4|.mkv|.avc|.vp3|.svq3|.nuv|.viv|.dv|.fli|.flv|.rar|.001|.wpl|.zip|.vdr|.dvr-ms|.xsp|.mts|.m2t|.m2ts|.evo|.ogv|.sdp|.avs|.rec|.url|.pxml|.vc1|.h264|.rcv|.rss|.mpls";
   // internal music extensions
   m_musicExtensions += "|.sidstream|.oggstream|.nsfstream|.asapstream|.cdda";
Index: xbmc/utils/GUIInfoManager.cpp
===================================================================
--- xbmc/utils/GUIInfoManager.cpp	(revision 30637)
+++ xbmc/utils/GUIInfoManager.cpp	(working copy)
@@ -33,6 +33,8 @@
 #include "addons/Visualisation.h"
 #include "ButtonTranslator.h"
 #include "utils/AlarmClock.h"
+//spotify
+#include "AdvancedSettings.h"
 #ifdef HAS_LCD
 #include "utils/LCD.h"
 #endif
@@ -4287,7 +4289,11 @@
       CMusicDatabase db;
       if (db.Open())
       {
-        m_libraryHasMusic = (db.GetSongsCount() > 0) ? 1 : 0;
+        //spotify
+        if (g_advancedSettings.m_spotifyEnable)
+          m_libraryHasMusic = 1;
+        else
+          m_libraryHasMusic = (db.GetSongsCount() > 0) ? 1 : 0;
         db.Close();
       }
     }
Index: xbmc/XBApplicationEx.cpp
===================================================================
--- xbmc/XBApplicationEx.cpp	(revision 30637)
+++ xbmc/XBApplicationEx.cpp	(working copy)
@@ -21,6 +21,11 @@
 #include "system.h"
 #include "XBApplicationEx.h"
 #include "utils/log.h"
+
+//spotify
+#include "spotinterface.h"
+#include "AdvancedSettings.h"
+
 #ifdef HAS_PERFORMANCE_SAMPLE
 #include "utils/PerformanceSample.h"
 #else
@@ -86,6 +91,13 @@
     try
     {
 #endif
+
+      //spotify, advance the spotifyAPI
+      if (g_advancedSettings.m_spotifyEnable)
+      {
+        g_spotifyInterface->processEvents();
+      }
+
       Process();
       //reset exception count
       processExceptionCount = 0;
